package view.main;

import controller.ControllerMainImpl;
import model.ModelObservableEvents;
import model.StateModel;
import model.TaskModel;
import model.TimeManager;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import tasks.TaskTemplate;
import view.AbstractTimedWindow;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.List;

/**
 * Status bar label needs to be in JScrollPane otherwise there is an issue with resizing of the windows.
 */
public class MainWindow extends AbstractTimedWindow {
    private JPanel panelGui;
    private JPanel panelChooseTasks;
    private JPanel panelChooseTiming;
    private JPanel panelCountdown;
    private JPanel panelControls;
    private JPanel panelStatusbar;
    private JButton buttonSubmit;
    private JButton buttonExit;
    private JButton buttonShowScheduledTasks;
    private JSpinner spinnerChooseTiming;
    private JLabel labelLastWhenElapsed;
    private JLabel labelLastDurationDelay;
    private JButton buttonCancel;
    private JLabel labelWhenElapsed;
    private JLabel labelDurationDelay;
    private JLabel labelLastId;
    private JLabel labelStatusBar;
    private JScrollPane scrollPaneStatusbar;
    private JTextArea statusAreaTextArea;

    static final int TIMING_STEP_IN_MINUTES = 15;
    static final String TIMING_DEFAULT_VALUE = "01:00";

    private static final Logger logger = LoggerFactory.getLogger(MainWindow.class);

    private final ChooseTaskUI uiChooseTask = new ChooseTaskUI();

    private final ControllerMainImpl mainController;

    public MainWindow(@NotNull ControllerMainImpl controller, @NotNull TaskModel taskModel) {
        super(controller, new JFrame("Vypnut√≠ PC"));

        mainController = controller;

        guiFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                controller.actionExitByUser();
            }
        });
        guiFrame.setContentPane(panelGui);
        guiFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        scrollPaneStatusbar.setViewportBorder(null);
        scrollPaneStatusbar.setBorder(null);

        List<TaskTemplate> tasks = taskModel.getTaskTemplates();

        // MUST CHANGE AUTOGENERATED JPANEL LAYOUT TO NON IDEA-MANAGED OTHERWISE ERROR
        JPanel generatedChooseTasksPanel = uiChooseTask.createUIChooseTask(tasks);
        panelChooseTasks.add(generatedChooseTasksPanel);

        spinnerChooseTiming.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent changeEvent) {
                String newTiming = getTimingValue();
                controller.changedTimingByUser(newTiming);
            }
        });
        buttonSubmit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String selectedTaskName = getSelectedTaskName();
                String timing = getTimingValue();
                String selectedTaskParameter = getSelectedTaskParameter();
                controller.actionNewTaskScheduledByUser(selectedTaskName, timing, selectedTaskParameter);
            }
        });
        buttonShowScheduledTasks.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                controller.actionShowScheduledTasks();
            }
        });
        buttonExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                controller.actionExitByUser();
            }
        });
        uiChooseTask.addActionListenerOnNewTaskSelected(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String selectedTaskName = getSelectedTaskName();
                String selectedTaskParameter = getSelectedTaskParameter();
                controller.actionNewTaskSelectedByUser(selectedTaskName, selectedTaskParameter);
            }
        });
        uiChooseTask.addActionListenerOnTaskParameterChanged(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                String selectedTaskName = getSelectedTaskName();
                String selectedTaskParameter = getSelectedTaskParameter();
                controller.actionNewTaskSelectedByUser(selectedTaskName, selectedTaskParameter);
            }
        });
        buttonCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                controller.actionCancelLastScheduledTask();
            }
        });
    }

    private String getTimingValue() {
        return spinnerChooseTiming.getValue().toString();
    }

    private void setSelectedTaskName(@NotNull String taskName) {
        uiChooseTask.setSelectedTaskName(taskName);
    }

    private String getSelectedTaskName() {
        return uiChooseTask.getSelectedTaskName();
    }

    private void setSelectedTaskParameter(@NotNull String taskParameter) {
        uiChooseTask.setSelectedTaskParameter(taskParameter);
    }

    private String getSelectedTaskParameter() {
        return uiChooseTask.getSelectedTaskParameter();
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        SpinnerListModel slm = new SpinnerListModel(generateTimeSequence(TIMING_STEP_IN_MINUTES));
        spinnerChooseTiming = new javax.swing.JSpinner(slm);
        spinnerChooseTiming.setValue(TIMING_DEFAULT_VALUE);
    }

    /**
     * Generates List sequence of Strings
     *
     * @param step in minutes determines step
     */
    private List<String> generateTimeSequence(int step) {
        List<String> sequence = new ArrayList<>();
        int onehour = 60;

        for (int i = 0; i < 60 * 12; i += step) {
            String hourPart = String.format("%02d", i / onehour);
            String minutePart = String.format("%02d", i % onehour);
            sequence.add(hourPart + ':' + minutePart);
        }
        return sequence;
    }

    private void refreshTimingCountdowns(@NotNull TimeManager durationDelay) {
        labelDurationDelay.setText(durationDelay.getRemainingDurationInHHMMSS_ifElapsedZeros());
        labelWhenElapsed.setText(durationDelay.getWhenElapsedInHHMM());
    }

    public void refreshViewFromModel(@NotNull StateModel stateModel) {
        setSelectedTaskName(stateModel.getSelectedTaskName());
        setSelectedTaskParameter(stateModel.getSelectedTaskParameter());
        spinnerChooseTiming.getModel().setValue(stateModel.getTimingDurationDelay());
        refreshTimingCountdowns(new TimeManager(stateModel.getTimingDurationDelay()));
        updateLastScheduledTask(stateModel.getLastScheduledTaskId());
    }

    private void updateLastScheduledTask(int id) {
        labelLastId.setText(String.valueOf(id));
    }

    public void showInfoMessageToUser(@NotNull String message) {
        labelStatusBar.setText(message);
        labelStatusBar.setToolTipText(message);
    }

    public void showErrorMessageToUser(@NotNull String errorMessage) {
        showInfoMessageToUser(errorMessage);
        showErrorPopup(errorMessage);
    }

    @Override
    protected void timerTick() {
        mainController.actionTimerTick_RefreshMainView();
    }

    public void refreshLastScheduledTaskTimingCountdowns(@NotNull TimeManager durationDelay) {
        labelLastDurationDelay.setText(durationDelay.getRemainingDurationInHHMMSS_ifElapsedZeros());
        labelLastWhenElapsed.setText(durationDelay.getWhenElapsedInHHMM());
    }

    @Override
    public void modelPropertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();

        //TODO exception illegal argument
        switch (ModelObservableEvents.valueOf(propertyName)) {
            case SELECTED_TIMING_DURATION_DELAY_CHANGED: {
                logger.debug("Chose timing has changed. {} -> {}", evt.getOldValue(), evt.getNewValue());
                String newTimingDurationDelay = evt.getNewValue().toString();
                TimeManager timeManager = new TimeManager(newTimingDurationDelay);
                refreshTimingCountdowns(timeManager);
                break;
            }
            case LAST_SCHEDULED_TASK_CHANGED: {
                int id = (int) evt.getNewValue();
                updateLastScheduledTask(id);
                break;
            }
        }
    }


}
