package model.db.operations;

import model.TimeManager;
import model.db.repo.*;
import model.scheduledtasks.ScheduledTask;
import model.scheduledtasks.ScheduledTaskStatus;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import tasks.ExecutableTask;
import tasks.TaskException;
import tasks.TaskTemplate;

import javax.persistence.EntityManager;
import java.util.Objects;

import static model.ModelObservableEvents.*;
import static model.scheduledtasks.ScheduledTaskStatus.*;

/**
 * ScheduledTask's implementation using Database as a storage.
 * Id of a scheduled task is generated by Jpa, is null after manual creation using new operator...
 */
public class ScheduledTaskJpaImpl extends ScheduledTask {

    private ScheduledTaskEntity entity;
    private final ScheduledTaskRepository scheduledTaskRepository;
    private final TaskTemplateRepository taskTemplateRepository;
    private final ExecutableTask executableTask;

    private ScheduledTaskJpaImpl(@NotNull EntityManager entityManager, @NotNull ExecutableTask executableTask) {
        this.executableTask = executableTask;
        scheduledTaskRepository = new ScheduledTaskRepository(entityManager);
        taskTemplateRepository = new TaskTemplateRepository(entityManager);
    }

    public ScheduledTaskJpaImpl(
            @NotNull EntityManager entityManager,
            @NotNull ExecutableTask executableTask,
            @NotNull TimeManager whenElapsed,
            @Nullable String parameter)
    {
        this(entityManager, executableTask);

        TaskTemplateEntity taskTemplateEntity = findOrCreateTaskTemplate(executableTask);
        if (parameter == null) {
            entity = new ScheduledTaskEntity(taskTemplateEntity, whenElapsed);
        } else {
            entity = new ScheduledTaskEntity(taskTemplateEntity, whenElapsed, parameter);
        }
        scheduledTaskRepository.create(entity); // generates id
    }

    private @NotNull TaskTemplateEntity findOrCreateTaskTemplate(@NotNull TaskTemplate taskTemplate) {
        try {
            return taskTemplateRepository.findOneById(taskTemplate.getName());
        } catch (ElemNotFoundException e) {
            return TaskTemplateEntity.fromTaskTemplate(taskTemplate);
        }
    }

    public ScheduledTaskJpaImpl(
            @NotNull EntityManager entityManager,
            @NotNull ExecutableTask task,
            @NotNull ScheduledTaskEntity alreadyExistingEntity)
    {
        this(entityManager, task);

        entity = alreadyExistingEntity; // should contain id
    }

    @Override
    public @NotNull Integer getId() {
        return entity.getId();
    }

    @Override
    public @NotNull TaskTemplate getTaskTemplate() {
        return entity.getTaskTemplate();
    }

    @Override
    public @NotNull String getTaskParameter() {
        return entity.getParameter();
    }

    @Override
    public @NotNull TimeManager getWhenElapsed() {
        return entity.getWhenElapsed();
    }

    @Override
    public @NotNull String getErrorMessage() {
        return entity.getErrorMessage();
    }

    @Override
    public @NotNull String getOutput() {
        return entity.getOutput();
    }

    @Override
    public @NotNull ScheduledTaskStatus getStatus() {
        return entity.getStatus();
    }

    @Override
    public void execute() throws TaskException {
        try {
            String output = executableTask.execute(entity.getParameter());
            if (output != null) {
                entity.setOutput(output);
            }
            setStatusIfPossible(EXECUTED_SUCCESS);
            firePropertyChange(SCHEDULED_TASK_FINISHED, getId(), this);
        } catch (TaskException ex) {
            entity.setErrorMessage(ex.toString());
            setStatusIfPossible(EXECUTED_ERROR);
            firePropertyChange(SCHEDULED_TASK_FINISHED_WITH_ERRORS, getId(), this);
            throw ex;
        } finally {
            // TODO is this necessary?
            scheduledTaskRepository.update(entity);
        }
    }

    @Override
    public void setStatusIfPossible(@NotNull ScheduledTaskStatus newStatus) {
        if (getStatus().isLessThan(newStatus)) {
            entity.setStatus(newStatus);
            scheduledTaskRepository.update(entity); // TODO is this necessary?
            firePropertyChange(SCHEDULED_TASK_STATUS_CHANGED, getId(), this);
        }
    }

    @Override
    public void recomputeStatusIfTaskHasElapsedChangeIntoElapsedStatus() {
        if (isScheduled() && getWhenElapsed().hasElapsed()) {
            setStatusIfPossible(ELAPSED);
        }
    }

    private boolean isScheduled() {
        return getStatus() == SCHEDULED;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ScheduledTaskJpaImpl that = (ScheduledTaskJpaImpl) o;
        return Objects.equals(entity, that.entity);
    }

    @Override
    public int hashCode() {
        return Objects.hash(entity);
    }
}
